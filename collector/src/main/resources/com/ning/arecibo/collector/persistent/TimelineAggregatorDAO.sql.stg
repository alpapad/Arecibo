group TimelineAggregatorDAO;

getTimelineAggregationCandidates() ::= <<
  select
    chunk_id
  , host_id
  , sample_kind_id
  , start_time
  , end_time
  , in_row_samples
  , blob_samples
  , sample_count
  , aggregation_level
  , not_valid
  from timeline_chunks
  where not_valid = 0
  and aggregation_level = :aggregationLevel
  and host_id != 0
  order by host_id, sample_kind_id, start_time
  ;
>>

getHostIdsAndSampleIdsOfAggregationCandidates() ::= <<
  select * from
    (select count(*) as chunk_count, hostId, sampleKindId
     from timeline_chunks
     where aggregation_level = :aggregationLevel and not_valid = 0) t
   where chunk_count >= :chunksNeeded
   order by host_id, sample_kind_id
   limit :limit
   ;
 >>

 getAggregationCandidatesForHostIdAndSampleKindIds(sampleKindIds) ::= <<
  select
    chunk_id
  , host_id
  , sample_kind_id
  , start_time
  , end_time
  , in_row_samples
  , blob_samples
  , sample_count
  , aggregation_level
  , not_valid
  from timeline_chunks
  where host_id = :host_id
  and sample_kind_id in (<sampleKindIds>)
  ;
>>
insertNewInvalidTimelineChunk() ::= <<
  insert into timeline_chunks (host_id, sample_kind_id, start_time, end_time, sample_count, in_row_samples, blob_samples, aggregation_level, not_valid)
  values (:hostId, :sampleKindId, :startTime, :endTime, :sampleCount, :inRowSamples, :blobSamples, :aggregationLevel, 1);
>>

getLastInsertedId() ::= <<
  select last_insert_id();
>>

makeTimelineChunkValid() ::= <<
  update timeline_chunks
  set not_valid = 0
  where chunk_id = :chunkId
  ;
>>

makeTimelineChunksInvalid(chunkIds) ::=<<
  update timeline_chunks
  set not_valid = 1
  where chunk_id in (<chunkIds>)
  ;
>>

deleteTimelineChunks(chunkIds) ::=<<
  delete from timeline_chunks where chunk_id in (<chunkIds>);
>>
