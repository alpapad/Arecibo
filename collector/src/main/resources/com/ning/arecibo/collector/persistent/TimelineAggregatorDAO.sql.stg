group TimelineAggregatorDAO;

getTimelineChunksForTimelineTimes(timelineTimesIds) ::= <<
  select
    sample_timeline_id
  , host_id
  , sample_kind_id
  , timeline_times_id
  , sample_count
  , start_time
  , end_time
  , in_row_samples
  , blob_samples
  from timeline_chunks
  where timeline_times_id in (<timelineTimesIds>)
  order by host_id, sample_kind_id, start_time
  ;
>>

getTimelineTimesAggregationCandidates() ::= <<
  select
    timeline_times_id
  , host_id
  , event_category_id
  , start_time
  , end_time
  , in_row_times
  , blob_times
  , count
  , aggregation_level
  , not_valid
  from timeline_times
  where not_valid = 0
  and aggregation_level = :aggregationLevel
  order by host_id, event_category_id, start_time
  ;
>>

insertNewInvalidTimelineTimes() ::= <<
  insert into timeline_times (host_id, event_category_id, start_time, end_time, count, in_row_times, blob_times, aggregation_level, not_valid)
  values (:hostId, :eventCategoryId, :startTime, :endTime, :count, :inRowTimes, :blobTimes, :aggregationLevel, 1);
>>

getLastInsertedId() ::= <<
  select last_insert_id();
>>

makeTimelineTimesValid() ::= <<
  update timeline_times
  set not_valid = 0
  where timeline_times_id = :timelineTimesId
  ;
>>

makeTimelineTimesInvalid(timelineTimesIds) ::=<<
  update timeline_times
  set not_valid = 1
  where timeline_times_id in (<timelineTimesIds>)
  ;
>>

deleteTimelineTimes(timelineTimesIds) ::=<<
  delete from timeline_times where timeline_times_id in (<timelineTimesIds>);
>>

deleteTimelineChunks(timelineTimesIds) ::=<<
  delete from timeline_chunks where timeline_times_id in (<timelineTimesIds>);
>>
