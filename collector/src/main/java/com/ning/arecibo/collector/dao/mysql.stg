group sql;

getHosts() ::= <<
   select * from hosts
>>

getHostByName() ::= <<
   select * from hosts where host = :host
>>

insertHost() ::= <<
    insert into hosts ( host, dep_type, dep_path, updated_dt, status )
    values ( :host, :dep_type, :dep_path, systimestamp, 'U' )
>>

updateHost() ::= <<
    update hosts set
        host = :host,
        dep_type = :dep_type,
        dep_path = :dep_path,
        updated_dt = systimestamp,
        status = 'U'
    where id = :id
>>

getTypes() ::= <<
   select * from core_types
>>

getPaths() ::= <<
   select * from dep_paths
>>

getEventTypes() ::= <<
   select * from event_types
>>

getTypeByName() ::= <<
   select * from core_types where dep_type = :dep_type
>>

getPathByName() ::= <<
   select * from dep_paths where dep_path = :dep_path
>>

getEventTypeByName() ::= <<
   select * from event_types where event_type = :event_type
>>


insertPath() ::= <<
   insert into dep_paths ( dep_path ) values ( :dep_path )
>>

insertType() ::= <<
   insert into core_types ( dep_type ) values ( :dep_type )
>>

insertEventType() ::= <<
   insert into event_types ( event_type ) values (:event_type )
>>

insert_host_event(host_event_table) ::= <<
	INSERT /*+ APPEND */ INTO <host_event_table> (
		ts, event_type_id, host_id, entry_mode, entry_part_1, entry_part_2, entry)
	VALUES (
		:ts, :event_type_id, :host_id, :entry_mode, :entry_part_1, :entry_part_2, :entry)
>>

insert_path_event(path_event_table) ::= <<
	INSERT /*+ APPEND */ INTO <path_event_table> (
		ts, event_type_id, path_id, type_id, entry_mode, entry_part_1, entry_part_2, entry)
	VALUES (
		:ts, :event_type_id, :path_id, :type_id, :entry_mode, :entry_part_1, :entry_part_2, :entry)
>>

insert_type_event(type_event_table) ::= <<
	INSERT /*+ APPEND */ INTO <type_event_table> (
		ts, event_type_id, type_id, entry_mode, entry_part_1, entry_part_2, entry)
	VALUES (
		:ts, :event_type_id, :type_id, :entry_mode, :entry_part_1, :entry_part_2, :entry)
>>

insert_generic_event(generic_event_table) ::= <<
	INSERT /*+ APPEND */ INTO <generic_event_table> (
		ts, event_type_id, entry_mode, entry_part_1, entry_part_2, entry)
	VALUES (
		:ts, :event_type_id, :entry_mode, :entry_part_1, :entry_part_2, :entry)
>>

split_and_sweep() ::= <<
BEGIN
	split_and_sweep (
	   p_table_name => :table_name,
	   p_ts => :ts,
	   p_keep => :keep
	);
END;
>>

table_space_stats() ::= <<
select
   fs.freespace                                "freeAllocatedMB",
   df.totalspace                               "totalAllocatedMB",
   (df.totalspace - fs.freespace)              "usedMB"
from
   (select
      table_schema,
      round(sum(data_free) / 1048576) TotalSpace
   from
      information_schema.tables
   group by
      table_schema
   ) df,
   (select
      table_schema,
      round(sum(max_data_length) / 1048576) FreeSpace
   from
      information_schema.tables
   group by
      table_schema
   ) fs
where df.table_schema = fs.table_schema
  and fs.table_schema = :tablespace
>>
