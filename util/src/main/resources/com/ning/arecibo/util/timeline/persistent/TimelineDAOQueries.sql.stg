group TimelineDAOQueries;

getHostId() ::= <<
  select
    host_id
  from hosts
  where host_name = :hostName
  ;
>>

getHost() ::= <<
  select
    host_name
  from hosts
  where host_id = :hostId
  ;
>>

getHosts() ::= <<
  select
    host_id
  , host_name
  from hosts
  ;
>>

addHost() ::=<<
  insert ignore into hosts (host_name, created_dt)
  values (:hostName, unix_timestamp());
>>

getSampleKindId() ::= <<
  select
    sample_kind_id
  from sample_kinds
  where sample_kind = :sampleKind
  ;
>>

getSampleKind() ::= <<
  select
    sample_kind
  from sample_kinds
  where sample_kind_id = :sampleKindId
  ;
>>

addSampleKind() ::=<<
  insert ignore into sample_kinds (sample_kind)
  values (:sampleKind);
>>

getSampleKindsByHostName() ::=<<
  select
    k.sample_kind
  from timeline_chunks c
  join hosts h using (host_id)
  join sample_kinds k using (sample_kind_id)
  where h.host_name = :hostName
  ;
>>

getSampleKinds() ::=<<
  select
    sample_kind_id
  , sample_kind
  from sample_kinds
  ;
>>

getLastInsertedId() ::= <<
  select last_insert_id();
>>

insertTimelineTimes() ::=<<
  insert into timeline_times (host_id, event_category, start_time, end_time, count, in_row_times, blob_times)
  values (:hostId, :eventCategory, :startTime, :endTime, :count, :inRowTimes, :blobTimes);
>>

insertTimelineChunk() ::=<<
  insert into timeline_chunks (host_id, sample_kind_id, sample_count, timeline_times_id, start_time, in_row_samples, blob_samples)
  values (:hostId, :sampleKindId, :sampleCount, :timelineTimesId, :startTime, :inRowSamples, :blobSamples);
>>

getSamplesByHostNamesAndSampleKinds(hostNameStrings, sampleKindStrings) ::=<<
  select
    h.host_id
  , h.host_name
  , k.sample_kind_id
  , k.sample_kind
  , c.sample_timeline_id
  , c.timeline_times_id
  , c.sample_count
  , c.in_row_samples
  , c.blob_samples
  , t.start_time
  , t.end_time
  , t.count
  , t.event_category
  , t.aggregation_level
  , t.not_valid
  , t.in_row_times
  , t.blob_times
  from timeline_chunks c
  join hosts h using (host_id)
  join sample_kinds k using (sample_kind_id)
  join timeline_times t using (timeline_times_id)
  where t.end_time >= :startTime
  and t.start_time \<= :endTime
  and h.host_name in (<hostNameStrings>)
  <if(sampleKindStrings)>
  and k.sample_kind in (<sampleKindStrings>)
  <endif>
  and t.not_valid = 0
  order by h.host_name, k.sample_kind, t.start_time asc
  ;
>>

test() ::=<<
  select 1;
>>
