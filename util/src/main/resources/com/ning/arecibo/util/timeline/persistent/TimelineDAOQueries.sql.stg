group TimelineDAOQueries;

getHostId() ::= <<
  select
    host_id
  from hosts
  where host_name = :hostName
  ;
>>

getHost() ::= <<
  select
    host_name
  from hosts
  where host_id = :hostId
  ;
>>

getHosts() ::= <<
  select
    host_id
  , host_name
  from hosts
  ;
>>

addHost() ::=<<
  insert ignore into hosts (host_name, created_dt)
  values (:hostName, unix_timestamp());
>>

getEventCategoryId() ::= <<
  select
    event_category_id
  from event_categories
  where event_category = :eventCategory
  ;
>>

getEventCategory() ::= <<
  select
    event_category
  from event_categories
  where event_category_id = :eventCategoryId
  ;
>>

addEventCategory() ::= <<
  insert ignore into event_categories (event_category)
  values (:eventCategory);
>>

getSampleKindId() ::= <<
  select
    sample_kind_id
  from sample_kinds
  where sample_kind = :sampleKind
    and event_category_id = :eventCategoryId
  ;
>>

getEventCategoryIdAndSampleKind() ::= <<
  select
    event_category_id
  , sample_kind
  from sample_kinds
  where sample_kind_id = :sampleKindId
  ;
>>

getSampleKind() ::= <<
  select
    sample_kind
  from sample_kinds
  where sample_kind_id = :sampleKindId
  ;
>>

addSampleKind() ::=<<
  insert ignore into sample_kinds (event_category_id, sample_kind)
  values (:eventCategoryId, :sampleKind);
>>

getSampleKindIdsByHostId() ::=<<
  select distinct sample_kind_id
  from timeline_chunks c
  where host_id = :hostId
  ;
>>

getSampleKinds() ::=<<
  select
    sample_kind_id
  , event_category_id
  , sample_kind
  from sample_kinds
  ;
>>

getLastInsertedId() ::= <<
  select last_insert_id();
>>

insertTimelineTimes() ::=<<
  insert into timeline_times (host_id, event_category_id, start_time, end_time, count, in_row_times, blob_times)
  values (:hostId, :eventCategoryId, :startTime, :endTime, :count, :inRowTimes, :blobTimes);
>>

insertTimelineChunk() ::=<<
  insert into timeline_chunks (host_id, sample_kind_id, sample_count, timeline_times_id, start_time, end_time, in_row_samples, blob_samples)
  values (:hostId, :sampleKindId, :sampleCount, :timelineTimesId, :startTime, :endTime, :inRowSamples, :blobSamples);
>>

getSamplesByHostIdsAndSampleKindIds(hostIds, sampleKindIds) ::=<<
  select
    c.host_id
  , c.sample_kind_id
  , c.sample_timeline_id
  , c.timeline_times_id
  , c.sample_count
  , c.in_row_samples
  , c.blob_samples
  , t.start_time
  , t.end_time
  , t.count
  , t.event_category_id
  , t.aggregation_level
  , t.not_valid
  , t.in_row_times
  , t.blob_times
  from timeline_chunks c
  join timeline_times t using (timeline_times_id)
  where t.end_time >= :startTime
  and t.start_time \<= :endTime
  and c.host_id in (<hostIds>)
  <if(sampleKindIds)>
  and sample_kind_id in (<sampleKindIds>)
  <endif>
  and t.not_valid = 0
  order by c.host_id, sample_kind_id, t.start_time asc
  ;
>>

test() ::=<<
  select 1;
>>
