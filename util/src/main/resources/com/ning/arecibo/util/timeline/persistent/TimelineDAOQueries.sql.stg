group TimelineDAOQueries;

getHostId() ::= <<
  select
    host_id
  from hosts
  where host_name = :hostName
  ;
>>

getHost() ::= <<
  select
    host_name
  from hosts
  where host_id = :hostId
  ;
>>

getHosts() ::= <<
  select
    host_id
  , host_name
  from hosts
  ;
>>

addHost() ::= <<
  insert ignore into hosts (host_name, created_dt)
  values (:hostName, unix_timestamp());
>>

getEventCategories() ::= <<
  select event_category_id, event_category
  from event_categories
  order by event_category_id asc
  ;
>>

getEventCategoryId() ::= <<
  select
    event_category_id
  from event_categories
  where event_category = :eventCategory
  ;
>>

getEventCategory() ::= <<
  select
    event_category
  from event_categories
  where event_category_id = :eventCategoryId
  ;
>>

addEventCategory() ::= <<
  insert ignore into event_categories (event_category)
  values (:eventCategory);
>>

getSampleKindId() ::= <<
  select
    sample_kind_id
  from sample_kinds
  where sample_kind = :sampleKind
    and event_category_id = :eventCategoryId
  ;
>>

getEventCategoryIdAndSampleKind() ::= <<
  select
    event_category_id
  , sample_kind
  from sample_kinds
  where sample_kind_id = :sampleKindId
  ;
>>

getSampleKind() ::= <<
  select
    sample_kind
  from sample_kinds
  where sample_kind_id = :sampleKindId
  ;
>>

addSampleKind() ::= <<
  insert ignore into sample_kinds (event_category_id, sample_kind)
  values (:eventCategoryId, :sampleKind);
>>

getSampleKindIdsByHostId() ::= <<
  select distinct sample_kind_id
  from timeline_chunks c
  where host_id = :hostId
  ;
>>

getSampleKindIdsForAllHosts() ::= <<
  select distinct sample_kind_id, host_id
  from timeline_chunks c
  ;
>>

getSampleKinds() ::= <<
  select
    sample_kind_id
  , event_category_id
  , sample_kind
  from sample_kinds
  ;
>>

getLastInsertedId() ::= <<
  select last_insert_id();
>>

insertTimelineChunk() ::= <<
  insert into timeline_chunks (chunk_id, host_id, sample_kind_id, sample_count, start_time, end_time, in_row_samples, blob_samples, aggregation_level, not_valid, dont_aggregate)
  values (:chunkId, :hostId, :sampleKindId, :sampleCount, :startTime, :endTime, :inRowSamples, :blobSamples, :aggregationLevel, :notValid, :dontAggregate);
>>

getSamplesByHostIdsAndSampleKindIds(hostIds, sampleKindIds) ::= <<
  select
    host_id
  , sample_kind_id
  , chunk_id
  , sample_count
  , in_row_samples
  , blob_samples
  , start_time
  , end_time
  , aggregation_level
  , not_valid
  , dont_aggregate
  from timeline_chunks
  where end_time >= :startTime
  and start_time \<= :endTime
  and host_id in (<hostIds>)
  <if(sampleKindIds)>
    and sample_kind_id in (<sampleKindIds>)
  <endif>
  and not_valid = 0
  order by host_id, sample_kind_id, start_time asc
  ;
>>

insertLastStartTimes() ::= <<
  insert into last_start_times (time_inserted, start_times)
                        values (:timeInserted, :startTimes)
>>

getLastStartTimes() ::= <<
  select time_inserted, start_times
  from last_start_times
  order by time_inserted desc
  limit 1
>>

deleteLastStartTimes() ::= <<
  delete from last_start_times
>>

bulkInsertHosts() ::= <<
  insert into hosts (host_name, created_dt)
  values (:hostName, unix_timestamp());
>>

bulkInsertEventCategories() ::= <<
  insert into event_categories (event_category)
  values (:eventCategory);
>>

bulkInsertSampleKinds() ::= <<
  insert into sample_kinds (event_category_id, sample_kind)
  values (:eventCategoryId, :sampleKind);
>>

bulkInsertTimelineChunks() ::= <<
  insert into timeline_chunks (chunk_id, host_id, sample_kind_id, sample_count, start_time, end_time, not_valid, dont_aggregate, aggregation_level, in_row_samples, blob_samples)
  values (:chunkId, :hostId, :sampleKindId, :sampleCount, :startTime, :endTime, :dontAggregate, :notValid, :aggregationLevel, :inRowSamples, :blobSamples);
>>

getHighestTimelineChunkId() ::= <<
  select chunk_id from timeline_chunks order by chunk_id desc limit 1;
>>

test() ::= <<
  select 1;
>>
